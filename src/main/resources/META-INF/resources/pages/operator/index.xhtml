<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:p="http://primefaces.org/ui">
<title>
    User: #{checkOperator.login}
</title>
<h:head>
    <h:outputStylesheet name="primefaces/components.css"/>
    <h:outputStylesheet name="style/style.css"/>
    <h:outputScript name="style/js/ru.js"/>

    <script type="text/javascript">
        // This example requires the Places library. Include the libraries=places
        // parameter when you first load the API. For example:
        // script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;libraries=places"
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: 50.431782, lng: 30.516382},
                zoom: 13
            });
            //Define direction
            googleMapRouteRenderer = new google.maps.DirectionsRenderer();
            googleMapRouteRenderer.setMap(map);
            //
            inputFrom = document.getElementById('myForm:input-from');
            inputTo = document.getElementById('myForm:input-to');
            var autocompleteFrom = new google.maps.places.Autocomplete(inputFrom);
            var autocompleteTo = new google.maps.places.Autocomplete(inputTo);
            // Bind the map's bounds (viewport) property to the autocomplete object,
            // so that the autocomplete requests use the current map bounds for the
            // bounds option in the request.
            autocompleteFrom.bindTo('bounds', map);
            autocompleteTo.bindTo('boundsTo', map);
            // Set the data fields to return when the user selects a place.
            autocompleteFrom.setFields(
                ['address_components', 'geometry', 'icon', 'name']);
            autocompleteTo.setFields(
                ['address_components', 'geometry', 'icon', 'name']);
            marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });
            autocompleteFrom.addListener('place_changed', function () {
                marker.setVisible(false);
                var place = autocompleteFrom.getPlace();
                if (!place.geometry) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert("No details available for input: '" + place.name + "'");
                    return;
                }
                // If the place has a geometry, then present it on a map.
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                }
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);
            });
            autocompleteTo.addListener('place_changed', function () {
                marker.setVisible(false);
                var place = autocompleteTo.getPlace();
                if (!place.geometry) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert("No details available for input: '" + place.name + "'");
                    return;
                }
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Why 17? Because it looks good.
                }
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);
            });
        }
        function calcRoute() {
            marker.setVisible(false);
            var request = {
                //origin: PF('addressFrom').jq.val(),
                origin: inputFrom.value,
                //destination: PF('addressTo').jq.val(),
                destination: inputTo.value,
                travelMode: google.maps.TravelMode.DRIVING
            };
            new google.maps.DirectionsService().route(request, function (response, status) {
                if (status == google.maps.DirectionsStatus.OK) {
                    googleMapRouteRenderer.setDirections(response);
                    var distance = response.routes[0].legs[0].distance;
                    sendDistanceToServer(distance.text, distance.value);
                } else {
                    alert("Не удается найти маршрут " + start.toUrlValue(6) + " к "
                        + end.toUrlValue(6) + " status: " + status);
                }
            });
        }
        function sendDistanceToServer(distanceText, distanceValue) {
            PF('distanceText').jq.val(distanceText);
            PF('distanceValue').jq.val(distanceValue);
            PF('sendResults').jq.click();
        }
    </script>


    <script defer="defer" type="text/javascript"
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCpraOK2IzV4OR_h5Gi8YbCnUL4OFDaeSs&amp;libraries=places&amp;callback=initMap">
    </script>
</h:head>
<h:body>
    <p:growl/>

    <p:layout fullPage="true" style="border: 0" >
        <!--TOP-->
        <p:layoutUnit id="top" position="north" size="50">
            <h:form>
                <p:outputLabel value="Оператор: #{checkOperator.name} #{checkOperator.lastName}"/>
                <p:clock pattern="HH:mm:ss dd.MM.yyyy" mode="server" style="float: right"/>
            </h:form>
        </p:layoutUnit>
        <!--CENTER-->
        <p:layoutUnit id="center" position="center">
            <h:form id="centerForm">
                <p:panelGrid columns="2" id="orderForm" style="margin:0 auto;font-size: 14px" >
                    <p:outputLabel value="Телефон"/>
                    <p:inputText value="#{takeOrder.clientPhoneNumber}" size="50" disabled="true"/>

                    <p:outputLabel value="Откуда"/>
                    <p:inputText value="#{takeOrder.fromAddress}" widgetVar="fromAddress" size="50"/>

                    <p:outputLabel value="Куда"/>
                    <p:inputText value="#{takeOrder.toAddress}" widgetVar="toAddress" size="50"/>

                    <p:outputLabel for="datetime" value="Datetime:" />
                    <p:calendar id="datetime" value="#{takeOrder.onDate}" pattern="MM/dd/yyyy HH:mm"
                                showTodayButton="true" showButtonPanel="true" locale="ru" lang="ru"/>

                    <p:outputLabel for="car" value="Авто:"/>
                    <p:selectOneRadio id="car" value="#{takeOrder.carType}" required="true" style="text-align:left">
                        <f:selectItem itemLabel="Стандарт" itemValue="STANDART" />
                        <f:selectItem itemLabel="Комфорт" itemValue="COMFORT" />
                        <f:selectItem itemLabel="Бизнес" itemValue="BUISNESS" />
                        <f:selectItem itemLabel="Универсал" itemValue="UNIVERSAL" />
                        <f:selectItem itemLabel="Микроавтобус" itemValue="MICROBUS" />
                    </p:selectOneRadio>

                    <p:outputLabel for="additionalService" value="Дополнительные услуги:"/>
                    <p:selectManyCheckbox id="additionalService" value="#{additionalService.selectedAdditionalService}"
                                          layout="grid" columns="3">
                        <f:selectItems value="#{additionalService.additionalServiceSet}" var="service"
                                       itemLabel="#{service}" itemValue="#{service}" />
                    </p:selectManyCheckbox>

                    <p:outputLabel for="messageForDriver" value="Дополнительная информация для водителя"/>
                    <p:inputTextarea id="messageForDriver" value="#{takeOrder.otherInfoToDriver}"/>

                    <p:outputLabel value="ДистанцияV"/>
                    <p:inputText value="#{takeOrder.distanceValue}" widgetVar="distanceValue" id="distanceValue"/>

                    <p:outputLabel value="ДистанцияT"/>
                    <p:inputText value="#{takeOrder.distanceText}" widgetVar="distanceText" id="distanceText"/>

                    <p:button value="проложить маршрут" onclick="calcRoute(); return false;"
                              update=":centerForm:distanceValue,:centerForm:distanceText"/>

                    <p:commandButton value="В обработку" action="#{takeOrder.actionTakeOrder}" widgetVar="sendResults"
                                     update=":orderQueryForm,distanceValue,distanceText"/>
                </p:panelGrid>
            </h:form>

        </p:layoutUnit>
        <!--BOTTOM-->
        <p:layoutUnit id="bottom" position="south" size="100">
            <h:form id="orderQueryForm">
                <p:growl id="msgs" showDetail="true" />

                <p:dataTable id="orderQuery" var="query" value="#{orderQuery.orderList}" scrollHeight="50">
                    <p:column headerText="Id">
                        <h:outputText value="#{query.id}" />
                    </p:column>
                    <p:column headerText="Номер заказчика">
                        <h:outputText value="#{query.clientPhoneNumber}" />
                    </p:column>
                    <p:column headerText="Сервис">
                        <h:outputText value="#{query.carType}" />
                    </p:column>
                    <p:column headerText="Откуда" colspan="2">
                        <h:outputText value="#{query.fromAddress}" />
                    </p:column>
                    <p:column headerText="Куда" colspan="2">
                        <h:outputText value="#{query.toAddress}" />
                    </p:column>
                    <p:column headerText="Дата">
                        <h:outputText value="#{query.date}" />
                    </p:column>
                    <p:column headerText="Время">
                        <h:outputText value="#{query.time.hours}:#{query.time.minutes}" />
                    </p:column>
                    <p:column headerText="Принят?">
                        <h:outputText value="#{query.received}" />
                    </p:column>
                    <p:column style="width:32px;text-align: center">
                        <p:commandButton update=":orderQueryForm:orderQuery" oncomplete="PF('orderDialog').show()"
                                         icon="ui-icon-search" title="View">
                            <f:setPropertyActionListener value="#{query}" target="#{orderQuery.selectedOrder}" />
                        </p:commandButton>
                    </p:column>
                </p:dataTable>

            </h:form>
        </p:layoutUnit>
        <!--LEFT-->
        <p:layoutUnit id="left" position="west" size="250" resizable="false" closable="false" collapsible="true"
                      style="margin: left"
                      header="Очередь заказов и сообщений" minSize="300">

            <p:accordionPanel id="calls">
                <p:tab title="Очередь звонков">
                    <h:form>
                        <p:repeat var="call" value="#{callList.calls}"
                                  mode="inline" scrollHeight="260" styleClass="leftContainer">

                            <h:panelGrid columns="1">
                                <p:outputPanel>
                                    <p:commandButton update="calls,centerForm:orderForm" value="#{call.phoneNumber}" action="#{callList.answer}">
                                        <f:setPropertyActionListener value="#{call}" target="#{callList.selectedCall}" />
                                    </p:commandButton>
                                </p:outputPanel>
                            </h:panelGrid>
                        </p:repeat>
                    </h:form>
                </p:tab>

                <p:tab title="Очередь сообщений">
                    <h:outputText value="Menu 2 Content" />
                </p:tab>

            </p:accordionPanel>
        </p:layoutUnit>
        <!--RIGHT-->
        <p:layoutUnit id="right" position="east" size="300" header="Доступные машины" resizable="false" closable="false"
                      style="margin-left: 0"
                      collapsible="true" >

            <h:form>
                <p:dataList value="#{showDriver.drivers}" var="driver" type="ordered">
                    #{driver.firstName}, #{driver.car.carType},  #{driver.car.carNumber}
                </p:dataList>
            </h:form>


        </p:layoutUnit>

    </p:layout>


</h:body>
</html>